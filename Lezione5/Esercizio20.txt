54.Creare altri due script, lanciaekilla.sh e lanciaeprendipid.sh. Lo script
lanciaeprendipid.sh deve lanciare in background 10 istanze dello script precedente
puntini.sh ridirigendo l'output di questi script sullo standard error.
Per ciascuno degli script puntini.sh lanciati, lo script lanciaeprendipid.sh deve
pttenere il PID del processo lanciato. I 10 PID li deve mandare sullo standard
output separati da spazi.
Lo script lanciaekilla.sh invece deve lanciare in modo opportuno lo script
lanciaeprendipid.sh, deve catturare l'output di questo e visualizzare l'elenco dei PID
ottenuti.
Poi deve usare i PID ottenuti per killare uno alla volta i processi puntini.sh lanciati
da lanciaeprendipid.sh .
lanciaeprendipid.sh
NUM=0
while [[ ${NUM} -lt 10 ]] ; do ./puntini.sh 30 >&2 & ((NUM=${NUM}+1)) ; echo "$! " ; done
lanciaekilla.sh
VAR=`./lanciaeprendipid.sh`
echo ${VAR}
for A in ${VAR} ; do kill -9 ${A} ; done

55.Creare uno script lanciaricorsivo.sh che necessita di un unico argomento intero
che è il numero totale di processi discendenti che rimangono ancora da lanciare.
Se il numero di discendenti da lanciare è maggiore di zero allora lo script lancia in
background una nuova istanza di sé stesso passando come argomento il proprio
argomento diminuito di 1.
Lanciato il figlio, il padre visualizza in output il pid del figlio, poi aspetta che il
proprio figlio termini la propria esecuzione.
Il figlio nel frattempo crea un suo figlio (un nipote del primo) il quale etc etc.
Lanciare inizialmente lo script passandogli 5 come argomento.
NUM=$1
NUOVONUM=0
((NUOVONUM=${NUM}-1))
if [[ ${NUM} -gt 0 ]] ; then ./lanciaricorsivo.sh ${NUOVONUM} & echo "$! " ; wait $! ; fi
